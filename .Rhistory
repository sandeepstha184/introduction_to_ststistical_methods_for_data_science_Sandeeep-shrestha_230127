# Create a scatterplot of the testing data points with prediction intervals
ggplot(results, aes(x = x1, y = y_true)) +
geom_point() +
geom_line(aes(x = x1, y = y_pred), color = "blue", linewidth = 1) +
geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.1, color = "red", size = 1) +
ggtitle("Model 4: Testing Data vs. Predictions with 95% Prediction Intervals") +
xlab("x1 (Age)") +
ylab("Total Sales Quantity")
# Create a scatterplot of the testing data points with prediction intervals
ggplot(results, ages(x = x1, y = y_true)) +
geom_point() +
geom_line(aes(x = x1, y = y_pred), color = "blue", linewidth = 1) +
geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.1, color = "red", size = 1) +
ggtitle("Model 4: Testing Data vs. Predictions with 95% Prediction Intervals") +
xlab("x1 (Age)") +
ylab("Total Sales Quantity")
# Create a scatterplot of the testing data points with prediction intervals
ggplot(results, aes(x = x1, y = y_true)) +
geom_point() +
geom_line(aes(x = x1, y = y_pred), color = "blue", linewidth = 1) +
geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.1, color = "red", size = 1) +
ggtitle("Model 4: Testing Data vs. Predictions with 95% Prediction Intervals") +
xlab("x1 (Age)") +
ylab("Total Sales Quantity")
library(matlib)
library(visdat)
library(ggplot2)
shopping_data <- read.csv("customer_shopping_data.csv")
head(shopping_data)
tail(shopping_data)
summary(shopping_data)
# Check for missing values in the entire data frame
missing_values <- is.na(shopping_data)
# Check for missing values in the entire data frame
missing_values <- is.na(shopping_data)
# Summarize the number of missing values in each column
missing_count <- colSums(missing_values)
print(missing_count)
unique_genders <- unique(shopping_data$gender)
print(unique_genders)
unique_category <- unique(shopping_data$category)
print(unique_category)
unique_payment_method <- unique(shopping_data$payment_method)
print(unique_payment_method)
unique_shopping_mall <- unique(shopping_data$shopping_mall)
print(unique_shopping_mall)
# Convert gender to numerical values
shopping_data$gender <- as.numeric(factor(shopping_data$gender, levels = unique(shopping_data$gender)))
# Convert category to numerical values
shopping_data$category <- as.numeric(factor(shopping_data$category, levels = unique(shopping_data$category)))
# Convert payment_method to numerical values
shopping_data$payment_method <- as.numeric(factor(shopping_data$payment_method, levels = unique(shopping_data$payment_method)))
# Convert payment_method to numerical values
shopping_data$shopping_mall <- as.numeric(factor(shopping_data$shopping_mall, levels = unique(shopping_data$shopping_mall)))
head(shopping_data)
# define input
x <- shopping_data[, !(names(shopping_data) %in% c("invoice_no","customer_id","quantity", "invoice_date", "gender", "shopping_mall"))]
x
# Convert invoice_date to Date format if not already done
shopping_data$invoice_date <- as.Date(shopping_data$invoice_date, format="%d/%m/%Y")
# Create a time series object with monthly frequency (assuming data is monthly)
shopping_data.ts <- ts(x,
start = c(as.numeric(format(min(shopping_data$invoice_date), "%Y")),
as.numeric(format(min(shopping_data$invoice_date), "%m"))),
end = c(as.numeric(format(max(shopping_data$invoice_date), "%Y")),
as.numeric(format(max(shopping_data$invoice_date), "%m"))),
frequency = 12)  # Monthly data, so frequency is 12
# Plot the time series of input x with one-month interval
plot(shopping_data.ts, main = "Time series plot of Input",
xlab = "Invoice Date", ylab = "X (inputs)")
# Plot the time series of input x with one-month interval
plot(shopping_data.ts, main = "Time series plot of Input",
xlab = "Invoice Date", ylab = "X (inputs)")
lines(dis,lwd=2,col="blue")
# Plot the time series of output y
# Convert invoice_date to Date format if not already done
shopping_data$invoice_date <- as.Date(shopping_data$invoice_date, format="%d/%m/%Y")
unique_dates <- unique(format(shopping_data$invoice_date, "%Y-%m"))
# Create a time series object with monthly frequency (assuming data is monthly)
shopping_data.ts <- ts(shopping_data$quantity,
start = c(as.numeric(format(min(shopping_data$invoice_date), "%Y")),
as.numeric(format(min(shopping_data$invoice_date), "%m"))),
end = c(as.numeric(format(max(shopping_data$invoice_date), "%Y")),
as.numeric(format(max(shopping_data$invoice_date), "%m"))),
frequency = 12)  # Monthly data, so frequency is 12
plot(shopping_data.ts, main = "Time series plot of Output",
xlab = "Invoice Date", ylab = "Y (output) or Total Quantity")
dis=density(x$price)
plot(dis,main = "Density plot of price")
# Creating a Histogram of X Inputs
hist(x$price,freq = FALSE,main="Histogram and density plot of price",xlab = "Price")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
rug(jitter(x$price))
dis=density(x$payment_method)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$payment_method,freq = FALSE,main="Histogram and density plot of payment Method",xlab = "Payment Method")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
rug(jitter(x$payment_method))
# Convert invoice_date to Date format if not already done
shopping_data$invoice_date <- as.Date(shopping_data$invoice_date, format="%d/%m/%Y")
# Create a time series object with monthly frequency (assuming data is monthly)
shopping_data.ts <- ts(x,
start = c(as.numeric(format(min(shopping_data$invoice_date), "%Y")),
as.numeric(format(min(shopping_data$invoice_date), "%m"))),
end = c(as.numeric(format(max(shopping_data$invoice_date), "%Y")),
as.numeric(format(max(shopping_data$invoice_date), "%m"))),
frequency = 12)  # Monthly data, so frequency is 12
# Plot the time series of input x with one-month interval
plot(shopping_data.ts, main = "Time series plot of Input",
xlab = "Invoice Date", ylab = "X (inputs)")
# Plot the time series of output y
# Convert invoice_date to Date format if not already done
shopping_data$invoice_date <- as.Date(shopping_data$invoice_date, format="%d/%m/%Y")
unique_dates <- unique(format(shopping_data$invoice_date, "%Y-%m"))
# Create a time series object with monthly frequency (assuming data is monthly)
shopping_data.ts <- ts(shopping_data$quantity,
start = c(as.numeric(format(min(shopping_data$invoice_date), "%Y")),
as.numeric(format(min(shopping_data$invoice_date), "%m"))),
end = c(as.numeric(format(max(shopping_data$invoice_date), "%Y")),
as.numeric(format(max(shopping_data$invoice_date), "%m"))),
frequency = 12)  # Monthly data, so frequency is 12
plot(shopping_data.ts, main = "Time series plot of Output",
xlab = "Invoice Date", ylab = "Y (output) or Total Quantity")
dis=density(x$price)
plot(dis,main = "Density plot of price")
# Creating a Histogram of X Inputs
hist(x$price,freq = FALSE,main="Histogram and density plot of price",xlab = "Price")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
rug(jitter(x$price))
dis=density(x$payment_method)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$payment_method,freq = FALSE,main="Histogram and density plot of payment Method",xlab = "Payment Method")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
rug(jitter(x$payment_method))
dis=density(x$age)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$age,freq = FALSE,main = "Histogram and density plot of age")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
rug(jitter(x$age))
dis=density(x$category)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$category,freq = FALSE,main = "Histogram and density plot of category")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
rug(jitter(x$category))
dis=density(shopping_data$quantity)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(shopping_data$quantity,freq = FALSE,main = "Histogram and density plot of Quantity")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
rug(jitter(x$shopping_data$quantity))
# Plotting age against quantity
Y <- shopping_data$quantity
plot(x$age,Y,main = "Correlation betweeen age and quantity signal", xlab = "age", ylab = "quantity" )
plot(x$price,Y,main = "Correlation betweeen price and quantity signal", xlab = "price", ylab = "quantity" )
plot(x$category,Y,main = "Correlation betweeen category and quantity signal", xlab = "category", ylab = "quantity" )
plot(x$payment_method,Y,main = "Correlation betweeen payment_method and quantity signal", xlab = "payment_method", ylab = "quantity" )
X = x
x$quantity <- shopping_data$quantity
cor(x)
plot(x)
xx = as.matrix(X)
xx[1:4,]
#x <- as.matrix(x)
y <- as.matrix(shopping_data$quantity)
y
df <- data.frame(
x1 = x[, "age"],
x2 = x[, "category"],
x3 = x[, "price"],
x4 = x[, "payment_method"],
y = x[, "quantity"]
)
df[1:5]
df <- data.frame(
x1 = x[, "age"],
x2 = x[, "category"],
x3 = x[, "price"],
x4 = x[, "payment_method"],
y = x[, "quantity"]
)
df[1:5]
thetaHat <- function(model, y){
return(solve(t(model) %*% model) %*% t(model) %*% y)
}
model1 <- lm(y ~ poly(x4, 1, raw = TRUE) + poly(x1, 2, raw = TRUE) + poly(x1, 3, raw = TRUE) +
poly(x2, 4, raw = TRUE) + poly(x1, 4, raw = TRUE), data = df)
model2 <- lm(y ~ poly(x4, 1, raw = TRUE) + poly(x1, 3, raw = TRUE) + poly(x3, 4, raw = TRUE), data = df)
model3 <- lm(y ~ poly(x3, 3, raw = TRUE) + poly(x3, 4, raw = TRUE), data = df)
model4 <- lm(y ~ poly(x2, 1, raw = TRUE) + poly(x1, 3, raw = TRUE) + poly(x3, 4, raw = TRUE), data = df)
model5 <- lm(y ~ poly(x4, 1, raw = TRUE) + poly(x1, 2, raw = TRUE) + poly(x1, 3, raw = TRUE) +
poly(x3, 4, raw = TRUE), data = df)
estimated_parameters_list <- list(
Model1 = coef(model1),
Model2 = coef(model2),
Model3 = coef(model3),
Model4 = coef(model4),
Model5 = coef(model5)
)
rss_values <- c(
sum(model1$residuals^2),
sum(model2$residuals^2),
sum(model3$residuals^2),
sum(model4$residuals^2),
sum(model5$residuals^2)
)
rss_values
rss_df <- data.frame(
Model = c("Model 1", "Model 2", "Model 3", "Model 4", "Model 5"),
RSS = rss_values
)
rss_df
calculate_log_likelihood <- function(model) {
n <- length(model$residuals)
sigma_sq <- sum(model$residuals^2) / (n - length(model$coefficients))
log_likelihood <- -n/2 * log(2 * pi * sigma_sq) - sum(model$residuals^2) / (2 * sigma_sq)
return(log_likelihood)
}
log_likelihood_values <- c(
calculate_log_likelihood(model1),
calculate_log_likelihood(model2),
calculate_log_likelihood(model3),
calculate_log_likelihood(model4),
calculate_log_likelihood(model5)
)
log_likelihood_df <- data.frame(
Model = c("Model 1", "Model 2", "Model 3", "Model 4", "Model 5"),
LogLikelihood = log_likelihood_values
)
print(log_likelihood_df)
aic_values <- c(
AIC(model1),
AIC(model2),
AIC(model3),
AIC(model4),
AIC(model5)
)
aic_df <- data.frame(
Model = c("Model 1", "Model 2", "Model 3", "Model 4", "Model 5"),
AIC = aic_values
)
aic_df
bic_values <- c(
BIC(model1),
BIC(model2),
BIC(model3),
BIC(model4),
BIC(model5)
)
bic_df <- data.frame(
Model = c("Model 1", "Model 2", "Model 3", "Model 4", "Model 5"),
BIC = bic_values
)
bic_df
predictions1 <- predict(model1)
predictions2 <- predict(model2)
predictions3 <- predict(model3)
predictions4 <- predict(model4)
predictions5 <- predict(model5)
errors1 <- df$y - predictions1
errors2 <- df$y - predictions2
errors3 <- df$y - predictions3
errors4 <- df$y - predictions4
errors5 <- df$y - predictions5
error_list <- list(errors1, errors2, errors3, errors4, errors5)
plot_qq <- function(errors, model_name) {
qqnorm(errors, main = paste("Q-Q Plot for", model_name))
qqline(errors, col = "red")
}
layout(matrix(1:5, nrow = 1))
for (i in 1:5) {
plot_qq(error_list[[i]], model_name = paste("Model", i))
}
mean_errors <- c(mean(errors1), mean(errors2), mean(errors3), mean(errors4), mean(errors5))
result_table <- data.frame(
Model = paste("Model", 1:5),
Mean_Error = mean_errors,
AIC = aic_values,
BIC = bic_values,
Likelihood = log_likelihood_values
)
result_table
### Task 2.6 ###
# Set the seed for reproducibility
set.seed(123)
# Split the data into training and testing datasets (70% train, 30% test)
train_index <- sample(1:nrow(df), 0.7 * nrow(df))
train_data <- df[train_index, ]
test_data <- df[-train_index, ]
# Fit the "best" model (Model 4) using the training data
best_model <- lm(y ~ poly(x2, 2, raw = TRUE) + poly(x1, 3, raw = TRUE) + poly(x3, 4, raw = TRUE), data = train_data)
# Predictions on the testing data
predictions <- predict(best_model, newdata = test_data, interval = "prediction", level = 0.95)
# Create a data frame to store results
results <- data.frame(
x1 = test_data$x1,
x2 = test_data$x2,
x3 = test_data$x3,
y_true = test_data$y,
y_pred = predictions[, 1],  # Predicted values
lower_bound = predictions[, 2],  # Lower bound of the prediction interval
upper_bound = predictions[, 3]   # Upper bound of the prediction interval
)
results
plot(results)
# Create a scatterplot of the testing data points with prediction intervals
ggplot(results, aes(x = x1, y = y_true)) +
geom_point() +
geom_line(aes(x = x1, y = y_pred), color = "blue", linewidth = 1) +
geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.1, color = "red", size = 1) +
ggtitle("Model 4: Testing Data vs. Predictions with 95% Prediction Intervals") +
xlab("x1 (Age)") +
ylab("Total Sales Quantity")
# Create a scatterplot of the testing data points with prediction intervals
ggplot(results, aes(x = x1, y = y_true)) +
geom_point() +
geom_line(aes(x = x1, y = y_pred), color = "grey", linewidth = 1) +
geom_errorbar(aes(ymin = lower_bound, ymax = upper_bound), width = 0.1, color = "blue", size = 1) +
ggtitle("Model 4: Testing Data vs. Predictions with 95% Prediction Intervals") +
xlab("x1 (Age)") +
ylab("Total Sales Quantity")
library(matlib)
library(visdat)
library(ggplot2)
shopping_data <- read.csv("customer_shopping_data.csv")
head(shopping_data)
tail(shopping_data)
summary(shopping_data)
# Check for missing values in the entire data frame
missing_values <- is.na(shopping_data)
# Summarize the number of missing values in each column
missing_count <- colSums(missing_values)
print(missing_count)
unique_genders <- unique(shopping_data$gender)
print(unique_genders)
unique_category <- unique(shopping_data$category)
print(unique_category)
unique_payment_method <- unique(shopping_data$payment_method)
print(unique_payment_method)
unique_shopping_mall <- unique(shopping_data$shopping_mall)
print(unique_shopping_mall)
# Convert gender to numerical values
shopping_data$gender <- as.numeric(factor(shopping_data$gender, levels = unique(shopping_data$gender)))
# Convert category to numerical values
shopping_data$category <- as.numeric(factor(shopping_data$category, levels = unique(shopping_data$category)))
# Convert payment_method to numerical values
shopping_data$payment_method <- as.numeric(factor(shopping_data$payment_method, levels = unique(shopping_data$payment_method)))
# Convert payment_method to numerical values
shopping_data$shopping_mall <- as.numeric(factor(shopping_data$shopping_mall, levels = unique(shopping_data$shopping_mall)))
head(shopping_data)
# define input
x <- shopping_data[, !(names(shopping_data) %in% c("invoice_no","customer_id","quantity", "invoice_date", "gender", "shopping_mall"))]
x
# Convert invoice_date to Date format if not already done
shopping_data$invoice_date <- as.Date(shopping_data$invoice_date, format="%d/%m/%Y")
# Create a time series object with monthly frequency (assuming data is monthly)
shopping_data.ts <- ts(x,
start = c(as.numeric(format(min(shopping_data$invoice_date), "%Y")),
as.numeric(format(min(shopping_data$invoice_date), "%m"))),
end = c(as.numeric(format(max(shopping_data$invoice_date), "%Y")),
as.numeric(format(max(shopping_data$invoice_date), "%m"))),
frequency = 12)  # Monthly data, so frequency is 12
# Plot the time series of input x with one-month interval
plot(shopping_data.ts, main = "Time series plot of Input",
xlab = "Invoice Date", ylab = "X (inputs)")
# Plot the time series of output y
# Convert invoice_date to Date format if not already done
shopping_data$invoice_date <- as.Date(shopping_data$invoice_date, format="%d/%m/%Y")
unique_dates <- unique(format(shopping_data$invoice_date, "%Y-%m"))
# Create a time series object with monthly frequency (assuming data is monthly)
shopping_data.ts <- ts(shopping_data$quantity,
start = c(as.numeric(format(min(shopping_data$invoice_date), "%Y")),
as.numeric(format(min(shopping_data$invoice_date), "%m"))),
end = c(as.numeric(format(max(shopping_data$invoice_date), "%Y")),
as.numeric(format(max(shopping_data$invoice_date), "%m"))),
frequency = 12)  # Monthly data, so frequency is 12
plot(shopping_data.ts, main = "Time series plot of Output",
xlab = "Invoice Date", ylab = "Y (output) or Total Quantity")
dis=density(x$price)
plot(dis,main = "Density plot of price")
# Creating a Histogram of X Inputs
hist(x$price,freq = FALSE,main="Histogram and density plot of price",xlab = "Price")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
dis=density(x$price)
plot(dis,main = "Density plot of price")
# Creating a Histogram of X Inputs
hist(x$price,freq = FALSE,main="Histogram and density plot of price",xlab = "Price")
#Adding density in the histogram
lines(dis,lwd=2,col="black")
dis=density(x$price)
plot(dis,main = "Density plot of price")
# Creating a Histogram of X Inputs
hist(x$price,freq = FALSE,main="Histogram and density plot of price",xlab = "Price")
#Adding density in the histogram
lines(dis,lwd=2,col="black")
dis=density(x$payment_method)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$payment_method,freq = FALSE,main="Histogram and density plot of payment Method",xlab = "Payment Method")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
dis=density(x$age)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$age,freq = FALSE,main = "Histogram and density plot of age")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
dis=density(x$category)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$category,freq = FALSE,main = "Histogram and density plot of category")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
dis=density(x$category)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(x$category,freq = FALSE,main = "Histogram and density plot of category")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
dis=density(shopping_data$quantity)
plot(dis,main = "Density plot of whole inputs")
# Creating a Histogram of X Inputs
hist(shopping_data$quantity,freq = FALSE,main = "Histogram and density plot of Quantity")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
dis=density(x$price)
plot(dis,main = "Density plot of price")
# Creating a Histogram of X Inputs
hist(x$price,freq = FALSE,main="Histogram and density plot of price",xlab = "Price")
#Adding density in the histogram
lines(dis,lwd=2,col="black")
#Adding density in the histogram
lines(dis,lwd=2,col="blue")
#task 3
## Model 4 will be used, parameter are selected and kept constant.
arr_1=0
arr_2=0
f_value=0
s_value=0
thetaHatModel4
#values from thetahat
thetebias <- 0.483065688 #selected parameter
thetaone <-0.143578928 # selected parameter
thetatwo <- 0.010038614 # constant value
thetathree <- 0.001912836 # constant value
Epison <- RSS_Model_4 * 2 ## fixing value of eplision
num <- 100 #number of iteration
##Calculating Y-hat for performing rejection ABC
counter <- 0
for (i in 1:num) {
range1 <- runif(1,-0.483065688,0.483065688) # calculating the range
range1
range2 <- runif(1,-0.143578928,0.143578928)
New_thetahat <- matrix(c(range1,range2,thetatwo,thetathree))
New_Y_Hat <- Y2 %*% New_thetahat ## calculating new Y-hat
new_RSS <- sum((y-New_Y_Hat)^2)
new_RSS
if (new_RSS > Epison){
arr_1[i] <- range1
arr_2[i] <- range2
counter = counter+1
f_value <- matrix(arr_1)
s_value <- matrix(arr_2)
}
}
hist(f_value)
hist(s_value)
###ploting Joint and Marginal Posterior Distribution of the graph
plot(f_value,s_value, col = c("brown", "blue"), main = "Joint and Marginal Posterior Distribution")
par(mfrow=c(1,1))
#x <- as.matrix(x)
y <- as.matrix(shopping_data$quantity)
y
df <- data.frame(
x1 = x[, "age"],
x2 = x[, "category"],
x3 = x[, "price"],
x4 = x[, "payment_method"],
y = x[, "quantity"]
)
df[1:5]
thetaHat <- function(model, y){
return(solve(t(model) %*% model) %*% t(model) %*% y)
}
model1 <- lm(y ~ poly(x4, 1, raw = TRUE) + poly(x1, 2, raw = TRUE) + poly(x1, 3, raw = TRUE) +
poly(x2, 4, raw = TRUE) + poly(x1, 4, raw = TRUE), data = df)
model2 <- lm(y ~ poly(x4, 1, raw = TRUE) + poly(x1, 3, raw = TRUE) + poly(x3, 4, raw = TRUE), data = df)
model3 <- lm(y ~ poly(x3, 3, raw = TRUE) + poly(x3, 4, raw = TRUE), data = df)
model4 <- lm(y ~ poly(x2, 1, raw = TRUE) + poly(x1, 3, raw = TRUE) + poly(x3, 4, raw = TRUE), data = df)
model5 <- lm(y ~ poly(x4, 1, raw = TRUE) + poly(x1, 2, raw = TRUE) + poly(x1, 3, raw = TRUE) +
poly(x3, 4, raw = TRUE), data = df)
View(model1)
estimated_parameters_list <- list(
Model1 = coef(model1),
Model2 = coef(model2),
Model3 = coef(model3),
Model4 = coef(model4),
Model5 = coef(model5)
)
View(estimated_parameters_list)
View(estimated_parameters_list)
